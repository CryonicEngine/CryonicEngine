[PLATFORMS]
ALL

[PERMUTATIONS]

BLEND_MODE
RENDER_PASS
SHADING_MODE
TWO_SIDED
FLIP_WINDING
FORWARD_PASS_WRITE_DEPTH
MSAA
CAMERA_MODE
SHADING_QUALITY
VERTEX_SKINNING
VERTEX_SHADER_RENDER_TARGET_ARRAY_INDEX

[MATERIALPARAMETER]

Permutation BLEND_MODE;
Permutation SHADING_MODE;
Permutation TWO_SIDED;

Color BaseColor @Default(Color(1.0, 1.0, 1.0));
bool UseBaseTexture;
Texture2D BaseTexture;

float MaskThreshold @Default(0.25);
Texture2D DitherNoiseTexture @Default("{ ac614d7c-2b31-4a7b-aa0c-c5d8200b7b89 }");

bool UseNormalTexture;
Texture2D NormalTexture;

bool UseOcclusionTexture;
Texture2D OcclusionTexture;

float RoughnessValue @Default(0.7) @Clamp(0.0, 1.0);
bool UseRoughnessTexture;
Texture2D RoughnessTexture;

float MetallicValue @Default(0.0) @Clamp(0.0, 1.0);
bool UseMetallicTexture;
Texture2D MetallicTexture;

bool UseOrmTexture;
Texture2D OrmTexture;

Color EmissiveColor @Default(Color(0.0, 0.0, 0.0));
bool UseEmissiveTexture;
Texture2D EmissiveTexture;

[MATERIALCONFIG]

#include <Shaders/Materials/MaterialConfig.h>

[RENDERSTATE]

#include <Shaders/Materials/MaterialState.h>

[MATERIALCONSTANTS]

  COLOR4F(BaseColor);
  COLOR4F(EmissiveColor);
  FLOAT1(MetallicValue);
  FLOAT1(RoughnessValue);
  FLOAT1(MaskThreshold);
  BOOL1(UseBaseTexture);
  BOOL1(UseNormalTexture);
  BOOL1(UseRoughnessTexture);
  BOOL1(UseMetallicTexture);
  BOOL1(UseEmissiveTexture);
  BOOL1(UseOcclusionTexture);
  BOOL1(UseOrmTexture);

[VERTEXSHADER]

#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0

#if VERTEX_SKINNING
  #define USE_SKINNING
#endif

#if RENDER_PASS == RENDER_PASS_EDITOR
  #define USE_DEBUG_INTERPOLATOR
#endif

#include <Shaders/Materials/MaterialVertexShader.h>

VS_OUT main(VS_IN Input)
{
  return FillVertexData(Input);
}


[GEOMETRYSHADER]

#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0

#if VERTEX_SKINNING
  #define USE_SKINNING
#endif

#if RENDER_PASS == RENDER_PASS_EDITOR
  #define USE_DEBUG_INTERPOLATOR
#endif

#include <Shaders/Materials/MaterialStereoGeometryShader.h>


[PIXELSHADER]

#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0
#define USE_SIMPLE_MATERIAL_MODEL
#define USE_MATERIAL_EMISSIVE
#define USE_MATERIAL_OCCLUSION
#define USE_TWO_SIDED_LIGHTING
#define USE_DECALS
#define USE_FOG
#define USE_CUSTOM_DITHER_NOISE

#if RENDER_PASS == RENDER_PASS_EDITOR
  #define USE_DEBUG_INTERPOLATOR
#endif

#include <Shaders/Materials/MaterialPixelShader.h>

Texture2D BaseTexture BIND_GROUP(BG_MATERIAL);
SamplerState BaseTexture_AutoSampler BIND_GROUP(BG_MATERIAL);

Texture2D NormalTexture BIND_GROUP(BG_MATERIAL);
SamplerState NormalTexture_AutoSampler BIND_GROUP(BG_MATERIAL);

Texture2D MetallicTexture BIND_GROUP(BG_MATERIAL);
SamplerState MetallicTexture_AutoSampler BIND_GROUP(BG_MATERIAL);

Texture2D RoughnessTexture BIND_GROUP(BG_MATERIAL);
SamplerState RoughnessTexture_AutoSampler BIND_GROUP(BG_MATERIAL);

Texture2D EmissiveTexture BIND_GROUP(BG_MATERIAL);
SamplerState EmissiveTexture_AutoSampler BIND_GROUP(BG_MATERIAL);

Texture2D OcclusionTexture BIND_GROUP(BG_MATERIAL);
SamplerState OcclusionTexture_AutoSampler BIND_GROUP(BG_MATERIAL);

Texture2D OrmTexture BIND_GROUP(BG_MATERIAL);
SamplerState OrmTexture_AutoSampler BIND_GROUP(BG_MATERIAL);

Texture2D DitherNoiseTexture BIND_GROUP(BG_MATERIAL);

float3 GetNormal()
{
  [branch]
  if (GetMaterialData(UseNormalTexture))
  {
    float3 normalTS = DecodeNormalTexture(NormalTexture.Sample(NormalTexture_AutoSampler, G.Input.TexCoord0.xy));
    return TangentToWorldSpace(normalTS);
  }
  else
  {
    return G.Input.Normal;
  }
}

float3 GetBaseColor()
{
  float3 baseColor = GetMaterialData(BaseColor).rgb * GetInstanceData().Color.rgb;

  // note that the default material actually doesn't support per-vertex colors
#if defined(USE_COLOR0)
  baseColor *= G.Input.Color0;
#endif

  [branch]
  if (GetMaterialData(UseBaseTexture))
  {
    baseColor *= BaseTexture.Sample(BaseTexture_AutoSampler, G.Input.TexCoord0.xy).rgb;
  }

  return baseColor;
}

float GetMetallic()
{
  [branch]
  if (GetMaterialData(UseOrmTexture))
  {
    return OrmTexture.Sample(OrmTexture_AutoSampler, G.Input.TexCoord0.xy).b;
  }
  else if (GetMaterialData(UseMetallicTexture))
  {
    return MetallicTexture.Sample(MetallicTexture_AutoSampler, G.Input.TexCoord0.xy).r;
  }
  else
  {
    return GetMaterialData(MetallicValue);
  }
}

float GetReflectance()
{
  return 0.5f;
}

float GetRoughness()
{
  [branch]
  if (GetMaterialData(UseOrmTexture))
  {
    return GetMaterialData(RoughnessValue) * OrmTexture.Sample(OrmTexture_AutoSampler, G.Input.TexCoord0.xy).g;
  }
  else if (GetMaterialData(UseRoughnessTexture))
  {
    return GetMaterialData(RoughnessValue) * RoughnessTexture.Sample(RoughnessTexture_AutoSampler, G.Input.TexCoord0.xy).r;
  }
  else
  {
    return GetMaterialData(RoughnessValue);
  }
}

float GetOpacity()
{
  float opacity = GetMaterialData(BaseColor).a * GetInstanceData().Color.a;

  [branch]
  if (GetMaterialData(UseBaseTexture))
  {
    opacity *= BaseTexture.Sample(BaseTexture_AutoSampler, G.Input.TexCoord0.xy).a;
  }

  #if BLEND_MODE == BLEND_MODE_MASKED
    return opacity - GetMaterialData(MaskThreshold);
  #else
    return opacity;
  #endif
}

float3 GetEmissiveColor()
{
  [branch]
  if (GetMaterialData(UseEmissiveTexture))
  {
    return EmissiveTexture.Sample(EmissiveTexture_AutoSampler, G.Input.TexCoord0.xy).rgb * GetMaterialData(EmissiveColor).rgb;
  }
  else
  {
    return GetMaterialData(EmissiveColor).rgb;
  }
}

float GetOcclusion()
{
  [branch]
  if (GetMaterialData(UseOrmTexture))
  {
    return OrmTexture.Sample(OrmTexture_AutoSampler, G.Input.TexCoord0.xy).r;
  }
  else if (GetMaterialData(UseOcclusionTexture))
  {
    return OcclusionTexture.Sample(OcclusionTexture_AutoSampler, G.Input.TexCoord0.xy).r;
  }
  else
  {
    return 1.0f;
  }
}

float4 GetDitherNoise(float2 pixelCoord)
{
  uint2 noiseTextureSize;
  DitherNoiseTexture.GetDimensions(noiseTextureSize.x, noiseTextureSize.y);

  return DitherNoiseTexture.SampleLevel(PointSampler, pixelCoord / noiseTextureSize, 0);
}
